# TODO:
# - chown
# - chmod

# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
#set shellopts '-eu'
set shellopts '-y'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set info size
set icons

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# set drawbox

set incfilter

# use enter for shell commands
map <enter> shell
map W $swaymsg "exec $TERMCMD --working-directory \"$PWD\""


# filter files as you type, then press enter to select
map f filter
cmap <enter> &{{
    # select and open file
    if [ "$lf_mode" = filter ]; then
        lf -remote "send $id :cmd-enter; setfilter; open"
    else
        lf -remote "send $id cmd-enter"
    fi
}}

cmap <a-n> &{{
    # go to next file
    if [ "$lf_mode" = filter ]; then
        lf -remote "send $id down"
    fi
}}

cmap <a-p> &{{
    # go to previous file
    if [ "$lf_mode" = filter ]; then
        lf -remote "send $id up"
    fi
}}

# follow symlink
cmd follow-link %{{
  lf -remote "send $id select \"$(readlink -- "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

map gl follow-link

# jump bindings
map <c-o> jump-prev
map <tab> jump-next

cmd yank-basename %basename -a -- $fx | head -c-1 | wl-copy 2>/dev/null; wl-paste | tr '\n' ','
cmd yank-paths %printf '%s' "$fx" | wl-copy 2>/dev/null; wl-paste | tr '\n' ','

map y
map yy :copy
map yn :yank-basename
map yp :yank-paths

cmd sudopaste ${{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to paste"
        exit
    fi
    case "$mode" in
        copy) sudo cp -rn -- "$@" .;;
        move)
            sudo mv -n -- "$@" .
            lf -remote "send clear"
            ;;
    esac
}}

cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to link"
        exit
    fi
    case "$mode" in
        # 'copy' mode indicates a symlink
        copy) ln -s -t . -- "$@";;
        # while 'move' mode indicates a hard link
        move)
            ln -t . -- "$@"
            lf -remote "send clear"
            ;;
    esac
}}

cmd link-relative %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echoerr no files to link"
        exit
    fi
    case "$mode" in
        # 'copy' mode indicates a symlink
        copy) ln -sr -t . -- "$@";;
        # while 'move' mode indicates a hard link
        move)
            ln -t . -- "$@"
            lf -remote "send clear"
            ;;
    esac
}}

map p
map pp paste
map pP sudopaste
map pl link
map pL link-relative

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
cmd fileopen ${{
	set -f
    case $(file --mime-type -Lb $f) in
		# manually handle archive files for bettter i/o handling and directory reload
		application/x-brotli) ;&
        application/gzip) ;&
        application/x-7z-compressed) ;&
        application/x-bzip2) ;&
        application/x-gtar) ;&
        application/x-lzma) ;&
        application/x-rar-compressed) ;&
        application/x-snappy-framed) ;&
        application/x-tar) ;&
        application/x-xz) ;&
        application/zip) ;&
        application/zstd) lf -remote "send $id \$ouch decompress \$fx"; lf -remote "send $id reload";;
        *) mimeopen $fx;;
        #*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd fileopen-ask ${{
	set -f
	mimeopen --ask $fx
}}
map o :fileopen
map O :fileopen-ask

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
		# manually handle archive files for bettter i/o handling and directory reload
		application/x-brotli) ;&
        application/gzip) ;&
        application/x-7z-compressed) ;&
        application/x-bzip2) ;&
        application/x-gtar) ;&
        application/x-lzma) ;&
        application/x-rar-compressed) ;&
        application/x-snappy-framed) ;&
        application/x-tar) ;&
        application/x-xz) ;&
        application/zip) ;&
        application/zstd) lf -remote "send $id \$ouch decompress \$fx"; lf -remote "send $id reload";;
        *) mimeopen $fx;;
        #*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
map ad :push %mkdir<space>
map af :push %touch<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv -t ~/.trash $fx
# define a custom 'delete' command
cmd trash %{{
    set -f
    printf "Trash $(printf '%s' "$fx" | tr '\n' ',')? [Y/n]\n"
    read ans
    ([[ "$ans" = "y" || "$ans" = "" ]] && trash-put -- $fx && printf "Trashed '$fx'.\n") || printf "Cancelled.\n"
}}

map d
map dd cut
map dD trash
map <delete> trash

cmd sudoedit $sudoedit "$f"
map E sudoedit

map g/ select /

map <c-d> &dragon-drop $fx

map <c-f> $lf -remote "send $id :select $(fzf)"

# spawn another instance, useful for opening multiple tabs
map S $swaymsg "exec $TERMCMD --class filemanager-tab --title lf -e lf \"$PWD\""

cmd archive %{{
	set -f
    printf "Archive name> \n"
    read ans
    ouch compress $fx $ans
}}

map Z :archive; unselect; reload

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# cmd extract ${{
#     set -f
#     case $f in
#         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
#         *.tar.gz|*.tgz) tar xzvf $f;;
#         *.tar.xz|*.txz) tar xJvf $f;;
#         *.zip) unzip $f;;
#         *.rar) unrar x $f;;
#         *.7z) 7z x $f;;
#     esac
# }}
# 
# # compress current file or selected files with tar and gunzip
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}
# 
# # compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}

# file previews
# set previewer ~/.config/lf/previewer

# or use alacritty-sixel-git and chafa
set previewer ~/.config/lf/previewer-sixel
set sixel
