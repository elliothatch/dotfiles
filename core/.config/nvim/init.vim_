set shellslash

let g:HomeDir='/home/ellioth/'

" sheerun/vim-polyglot
let g:polyglot_disabled = ['typescript', 'csv']
"  - Options {{{
" 'hrsh7th/nvim-compe'
let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
" let g:compe.preselect = 'always'
let g:compe.preselect = 'never'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.resolve_timeout = 800
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = {}
let g:compe.source.buffer.menu = '[B]'
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = {}
let g:compe.source.nvim_lsp.menu = '[L]'
let g:compe.source.nvim_lua = v:true
" let g:compe.source.vsnip = v:true
let g:compe.source.ultisnips = v:true
let g:compe.source.luasnip = v:true
let g:compe.source.emoji = v:true

inoremap <silent><expr> <C-Space> compe#complete()
lua << EOF
local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = vim.fn.col('.') - 1
    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil
end

-- Use (s-)tab to:
--- move to prev/next item in completion menuone
--- jump to prev/next snippet's placeholder
_G.tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-n>"
  -- elseif vim.fn['vsnip#available'](1) == 1 then
  --   return t "<Plug>(vsnip-expand-or-jump)"
  elseif check_back_space() then
    return t "<Tab>"
  else
    return vim.fn['compe#complete']()
  end
end
_G.s_tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-p>"
  -- elseif vim.fn['vsnip#jumpable'](-1) == 1 then
  --   return t "<Plug>(vsnip-jump-prev)"
  else
    -- If <S-Tab> is not working in your terminal, change it to <C-h>
    return t "<S-Tab>"
  end
end

vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
EOF

" vim-airline/vim-airline
"let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme='luna'
"
"let g:airline_powerline_fonts = 1
"let g:airline_extensions = ['tabline']

" neomake/neomake
let g:neomake_open_list = 2

" Shougo/deoplete.nvim
" let g:deoplete#enable_at_startup = 1

" elliothatch/nvim-typescript
" let g:nvim_typescript#_server_path = 'node_modules\\.bin\\tsserver'

let g:neomake_html_enabled_makers = []
let g:neomake_c_enabled_makers  = ['makeprg']
let g:neomake_cpp_enabled_makers  = ['makeprg']

" neoclide/coc
"
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" nnoremap <silent> <leader>tm :call <SID>show_documentation()<CR>
" nmap <silent> <leader>tr <Plug>(coc-references)
" nmap <silent> <leader>tR <Plug>(coc-rename)
" nmap <silent> <leader>td <Plug>(coc-definition)
" nmap <silent> <leader>tD <Plug>(coc-type-definition)
" nmap <silent> <leader>ti <Plug>(coc-implementation)
" nmap <silent> <leader>t[ <Plug>(coc-diagnostic-next)
" nmap <silent> <leader>t] <Plug>(coc-diagnostic-prev)
" nmap <silent> <leader>t/ :CocList outline<CR>
" nmap <silent> <leader>te :CocList diagnostics<CR>
" nmap <silent> <leader>ta :CocAction<CR>

" nnoremap <leader>tt :TSType<CR>
" nnoremap <leader>ti :TSImport<CR>
" nnoremap <leader>ts :TSTypePreview<CR>

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" liuchengxu/vista
" let g:vista_default_executive = 'coc'
" let g:vista_executive_for = {
" \ 'c': 'ctags',
" \ 'cpp': 'ctags',
" \}

" disable icons since I don't use nerdfonts
" let g:vista#renderer#enable_icon = 0

" nnoremap <leader>to :Vista!!<cr>
" nnoremap <leader>tf :Vista finder<cr>


" let esp32Maker = {'name': 'esp32 c compiler'}
" function! esp32Maker.get_list_entries(jobinfo) abort
"       return [
"         \ {'text': 'Some error', 'lnum': 1, 'bufnr': a:jobinfo.bufnr},
"         \ {'text': 'Some warning', 'type': 'W', 'lnum': 2, 'col': 1,
"         \  'length': 5, 'filename': '/path/to/file'},
"         \ ]
"   endfunction

"let g:tagbar_type_css = {
"\ 'ctagstype' : 'Css',
    "\ 'kinds'     : [
        "\ 'c:classes',
        "\ 's:selectors',
        "\ 'i:identities'
    "\ ]
"\ }

"let g:tagbar_type_typescript = {                                                  
  "\ 'ctagsbin' : 'tstags',                                                        
  "\ 'ctagsargs' : '-f-',                                                           
  "\ 'kinds': [                                                                     
    "\ 'e:enums:0:1',                                                               
    "\ 'f:function:0:1',                                                            
    "\ 't:typealias:0:1',                                                           
    "\ 'M:Module:0:1',                                                              
    "\ 'I:import:0:1',                                                              
    "\ 'i:interface:0:1',                                                           
    "\ 'C:class:0:1',                                                               
    "\ 'm:method:0:1',                                                              
    "\ 'p:property:0:1',                                                            
    "\ 'v:variable:0:1',                                                            
    "\ 'c:const:0:1',                                                              
  "\ ],                                                                            
  "\ 'sort' : 0                                                                    
"\ }     

" }}}
"  - Setup {{{
"
" Shougo/denite.nvim
" add git ls-files source
"call denite#custom#alias('source', 'file_rec/git', 'file_rec')
"call denite#custom#var('file_rec/git', 'command',
"\ ['git', 'ls-files', '-co', '--exclude-standard'])
"nnoremap <silent> <C-p> :<C-u>Denite
"\ `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>

" move cursor up/down with Ctrl-j and Ctrl-k
"call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
"call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')

" neomake/neomake
" automatically run on load and save
"call neomake#configure#automake('rw', 1000)
" }}}
"  - Bindings {{{
" scrooloose/nerdcommenter
"nmap <leader>/ <leader>c<Space>
"vmap <leader>/ <leader>c<Space>

" Shougo/denite.nvim
"nnoremap <C-p> :<C-u>Denite file_rec/git<CR>
"nnoremap <C-Space> :<C-u>Denite buffer<CR>

" run these commands in a separate tab, auto open the quickfix list
nnoremap <leader>gl :tabe %<CR>:NeomakeDisableTab<CR>:Glog -- %<CR>:botright copen<CR>
nnoremap <leader>gL :tabe %<CR>:NeomakeDisableTab<CR>:Glog<CR>:botright copen<CR>
nnoremap <leader>gd :tabe %<CR>:NeomakeDisableTab<CR>:Gdiff<CR>
nnoremap <leader>gb :tabe %<CR>:NeomakeDisableTab<CR>:Gblame<CR>

" build project
nnoremap <leader>b :Neomake<cr>

" mileszs/ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column --hidden --path-to-ignore ' . g:HomeDir . '.config/ag/.ignore'
"vnoremap <Leader>av :<C-u>let cmd = "Ack! " . VAck() <bar> call histadd("cmd", cmd) <bar> execute cmd<CR>

"nnoremap <expr> <leader>ss ':Ack! '          . input('[ack]: ')              . ' ' . expand('%:p:h') . '<cr>'
nnoremap <expr> <leader>ss InputOrCancel('Ack! ',    '[ack]: ',     '') . '<cr>'
nnoremap <expr> <leader>sl InputOrCancel('LAck ',    '[ack]\|L: '), '') . '<cr>'
nnoremap <expr> <leader>sf InputOrCancel('AckFile ', '[ack]\|F: '), '') . '<cr>'
nnoremap <expr> <leader>s/ ':AckFromSearch ' . '<cr>'

" search from current buffer path
nnoremap <expr> <leader>Ss InputOrCancel('Ack! ',    '[ack\|b]: ',    ' ' . expand('%:p:h')) . '<cr>'
nnoremap <expr> <leader>Sl InputOrCancel('LAck ',    '[ack\|b]\|L: ', ' ' . expand('%:p:h')) . '<cr>'
nnoremap <expr> <leader>Sf InputOrCancel('AckFile ', '[ack\|b]\|F: ', ' ' . expand('%:p:h')) . '<cr>'
nnoremap <expr> <leader>S/ ':AckFromSearch ' . expand('%:p:h') . '<cr>'


" elliothatch/nvim-typescript

" nnoremap <leader>td :TSDef<CR>
" nnoremap <leader>tD :TSTypeDef<CR>
" nnoremap <leader>tt :TSType<CR>
" nnoremap <leader>ti :TSImport<CR>
" nnoremap <leader>tm :TSDoc<CR>
" nnoremap <leader>ts :TSTypePreview<CR>

" }}}

" these are supposed to help with autocmd FileType not triggering but they
" don't fix the issue
" filetype plugin indent on
" set shortmess-=F
" }}}
"  - Make settings {{{
" set errorformat+=%f:%l:%c:\ %trror:\ %m
" neotags
let g:neotags_ignore = [
		\ 'text',
		\ 'nofile',
		\ 'mail',
		\ 'qf',
		\ 'fzf'
		\ ]
" let g:neotags_events_update = ['BufWritePost', 'BufReadPre']
" let g:neotags_ctags_args = [
" 		\ '--fields=+l',
" 		\ '--c-kinds=+p',
" 		\ '--c++-kinds=+p',
" 		\ '--sort=yes',
" 		\ '--extras=+q'
" 		\ ]

" let g:neotags_directory = '~/.vim_tags'
if isdirectory($IDF_PATH)
    set path+=$IDF_PATH/components/**1/include
endif
" }}}
"  - Clipboard settings {{{
" let g:clipboard = {
" 	\'name': 'wl-clipboard',
" 	\   'copy': {
" 	\      '+': 'wl-copy',
" 	\      '*': 'wl-copy',
" 	\    },
" 	\   'paste': {
" 	\      '+': 'wl-paste --no-newline',
" 	\      '*': 'wl-paste --no-newline --primary',
" 	\   },
" 	\'cache_enabled': 1,
" \}
" }}}
"  - Folding {{{

function! Strip(input_string)
    return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

function! MyFoldText() " {{{
    let l:line = getline(v:foldstart)

    let l:nucolwidth = &foldcolumn + &number * &numberwidth
    let l:windowwidth = winwidth(0) - l:nucolwidth
    let l:foldedlinecount = v:foldend - v:foldstart

    let l:rightcoltext = '|' . repeat(' ', l:nucolwidth - len(l:foldedlinecount)) . l:foldedlinecount . '|'

    " expand tabs into spaces
    let l:onetab = strpart('          ', 0, &tabstop)
    let l:line = substitute(l:line, '\t', l:onetab, 'g')

    let l:minwidth = &colorcolumn-1
    " pad with whitespace
	"let leftcolbuffer = 10
    "let l:line = l:line . ' ' . repeat(" ", leftcolbuffer)
	if len(l:line) < l:minwidth
		let l:line = l:line . repeat(' ',(l:minwidth)-len(l:line))
	endif
    let l:line = strpart(l:line, 0, l:windowwidth - len(l:rightcoltext)-2)

	" TODO: write generic flexible column functions
	" TODO: make this display some simple outline view (e.g. language symbols for class, function, interface, etc
	"let centercolcontent = ''
	"if v:foldstart == 1
		"let centercolcontent = @%
	"endif

	"let currentlineno = v:foldstart+1
	"let i = 0
	"while i < 5
		"let currentline = Strip(getline(currentlineno))
		"if len(currentline) > 1
			"let centercolcontent = substitute(currentline, '\t', onetab, 'g')
			"break
		"endif
		"let i = i + 1
	"endwhile
	let l:fillcharcount = l:windowwidth - len(l:line) - len(l:rightcoltext)
	"let l:centercolcontent = ''
	"let l:centercoltext = l:centercolcontent . ' ' . repeat(' ', l:fillcharcount-len(l:centercolcontent))
	"let centercolcontent = centercolcontent . ' ' . repeat(' ', fillcharcount-len(centercolcontent)-2)
	"let centercoltext = strpart('|' . centercolcontent, 0, fillcharcount)

	return l:line . repeat(' ', l:fillcharcount) . l:rightcoltext
    "return l:line . l:centercoltext . l:rightcoltext
endfunction " }}}

set foldtext=MyFoldText()
" }}}
" Autocommands {{{
function! RemoveBufferIfPreview()
    if &previewwindow
        set nobuflisted
    endif
endf

function! LoadIncludes()
	let l:PreReadIncludePaths = systemlist('cat ' . expand('%p') . ' | grep "#include" | sed -e ''s/.*"\(.*\)".*/\1/'' | sed -e ''s/.*<\(.*\)>.*/\1/''')
	" neotags needs some time on each buffer before it triggers ctags?
	" neovim ofetn doesn't even display the tab or buffers
	execute 'tabnew'
	for filePath in l:PreReadIncludePaths
		execute 'sfind ' . filePath
		execute 'sleep 10m'
		execute 'bd'
		" let l:tagFile = g:neotags_directory . '/' . substitute(filePath, '/\//', '__', 'g')
		" call system('ctags ' . join(g:neotags_ctags_args, ' ') . ' -f "' . l:tagFile . '" "' . filePath . '"')
	endfor
	execute 'sleep 400m'
	execute 'tabc'
endf

function! FoldOutline(lnum)
	let l:line = getline(v:lnum)
	let l:nextline = getline(v:lnum + 1)

	let l:linematch = matchstrpos(l:line,  '.*[├└]')
	let l:nextlinematch = matchstrpos(l:nextline,  '.*[├└]')

	let l:linelevel = 0
	if l:linematch[2] >= 0
		let l:linelevel = max([1, (l:linematch[2] - 2)/4 + 1])
	endif

	let l:nextlinelevel = 0
	if l:nextlinematch[2] >= 0
		let l:nextlinelevel = max([1, (l:nextlinematch[2] - 2)/4 + 1])
	endif

	if l:nextlinelevel > l:linelevel
		return l:nextlinelevel
	endif

	return l:linelevel
endfunction

augroup myautocmds
	" automatically add the current extension to 'gf' paths
	autocmd!
	autocmd BufNewFile,BufRead * execute 'setl suffixesadd+=.' . expand('%:e')
	" make  '-' part of words in css files
	autocmd FileType css,sass,scss execute 'setl iskeyword+=-'
	" skip quickfix list on :bn
	autocmd FileType qf set nobuflisted
	" use spaces instead of tabs in certain filetypes
	autocmd FileType typescript execute 'setl expandtab'
	" autocmd FileType typescript execute 'setl expandtab'
	" autocmd FileType typescript execute 'nnoremap <buffer> <silent> <leader>tI :CocCommand tsserver.organizeImports<cr>'
	" don't add preview window buffers to buffer list
	autocmd BufEnter * call RemoveBufferIfPreview()
	" autocmd BufReadPre * call PreReadIncludes()
	" autocmd BufEnter c,cpp call LoadIncludes()
	" autocmd FileType c,cpp set makeprg=BATCH_BUILD=1\ make
	
	autocmd FileType c,cpp execute 'setl makeprg=idf.py\ build'

	" simrat39/symbols-outline.nvim
	" outline uses comment highlight group for vertical pipes, turn off italics
	autocmd FileType Outline execute 'hi Comment gui=NONE cterm=NONE'
	autocmd FileType Outline execute 'hi Folded guifg=#f2ead7 guibg=#1a0a16 guisp=#1a0a16 gui=NONE ctermfg=230 ctermbg=234 cterm=NONE'
'
'
	autocmd FileType Outline execute 'setl foldlevel=1|setl foldexpr=FoldOutline(v:lnum)|setl foldmethod=expr'
	" dap
	autocmd FileType dap-repl lua require('dap.ext.autocompl').attach()
	" dap-ui
	" WHY DOESN'T dapui* work???
	autocmd FileType dapui* setl statusline=[%n]%f
	autocmd FileType dap-repl setl statusline=[%n]%f
augroup END
" }}}
" Filetypes {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker keywordprg=:help
    au FileType help setlocal textwidth=78
	au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}
" LSP {{{
lua << EOF

local capabilities = vim.tbl_extend('keep', vim.lsp.protocol.make_client_capabilities(), lsp_status.capabilities)

-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- for k,v in pairs(lsp_status.capabilities) do capabilities[k] = v end
EOF

" statusline
set statusline=
set statusline+=[%n]                                  "buffernr
" TODO: change the color for modified
set statusline+=%#Todo#%m%r%w%*                           " modified/readonly
"set statusline+=%#LineNr#%{fugitive#statusline()}%*             " git branch
set statusline+=%#LineNr#%{FugitiveHead()}%*             " git branch
set statusline+=\ %<%F\                                "File+path
set statusline+=%*\ %=\  "divider
set statusline+=%{LspStatusFunction()}\ 
set statusline+=%#Todo#%{LspStatus()}%*\ 
set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}      "Encoding
set statusline+=%{(&bomb?\",BOM\":\"\")}            "Encoding2
set statusline+=[%{&ff}]\                              "FileFormat (dos/unix..)
set statusline+=%y\                                  "FileType
" set statusline+=%{SpinnerText()}
set statusline+=0x%04B\          "character under cursor
set statusline+=%l:%v\  "row:col
set statusline+=%p%%\  "row %
"set statusline+=%P\ \                      "Modified? Readonly? Top/bot.

" }}}
" load all c/c++ #include directives into buffers on another tab, so neotags
" indexes them, then close the tab.
nnoremap <leader>L :call LoadIncludes()<cr>

" }}}
"
" puts quickfix files in args
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let l:buffer_numbers = {}
  for l:quickfix_item in getqflist()
    let l:buffer_numbers[l:quickfix_item['bufnr']] = bufname(l:quickfix_item['bufnr'])
  endfor
  return join(map(values(l:buffer_numbers), 'fnameescape(v:val)'))
endfunction

" run command on each file in quickfix
" to save changes, run :argdo update
nnoremap <expr> <leader>r InputOrCancel('Qargs<bar>:argdo %', '[execute]\|q: ', '') . '<cr>'
" }}}
"  - Terminal Mode {{{
" }}}
"  - Other {{{
function! SynStack()
  if !exists('*synstack')
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

nnoremap <leader>. :call SynStack()<cr>
" }}}
" Misc {{{
" Map insert mdoe keys to insert the autocomplete match when typed
function! AutocompleteOnSymbol(char) "{{{
if pumvisible()
	return "\<c-y>\<c-r>='" . a:char . "'\<cr>"
else
	return a:char
endif
endfunction "}}}
function! InputOrCancel(prefix, prompt, suffix) "{{{
	call inputsave()
	let l:result = input(a:prompt)
	if l:result == ''
		return '<cr>'
	endif
	call inputrestore()
	let l:cmd = a:prefix . l:result . a:suffix
	call histadd('cmd', l:cmd)
	return ':' . l:cmd
endfunc "}}}

function! AutocompleteOnInsertChar(chars)
	for l:char in a:chars
		execute 'inoremap <silent> <expr> ' . l:char . ' AutocompleteOnSymbol("'.l:char.'")'
	endfor
endfunction

" neomake spinner
let s:spinner_index = 0
let s:active_spinners = 0
let s:spinner_states = ['|', '/', '-', '\', '|', '/', '-', '\']

function! StartSpinner()
    let b:show_spinner = 1
    let s:active_spinners += 1
    if s:active_spinners == 1
        let s:spinner_timer = timer_start(1000 / len(s:spinner_states), 'SpinSpinner', {'repeat': -1})
    endif
endfunction

function! StopSpinner()
    let b:show_spinner = 0
    let s:active_spinners -= 1
    if s:active_spinners == 0
        :call timer_stop(s:spinner_timer)
    endif
endfunction

function! SpinSpinner(timer)
    let s:spinner_index = float2nr(fmod(s:spinner_index + 1, len(s:spinner_states)))
    redraw
endfunction

function! SpinnerText()
    if get(b:, 'show_spinner', 0) == 0
        return " "
    endif

    return s:spinner_states[s:spinner_index]
endfunction

augroup neomake_hooks
    au!
    autocmd User NeomakeJobInit :call StartSpinner()
    " autocmd User NeomakeJobInit :echom "Build started"
    autocmd User NeomakeFinished :call StopSpinner()
    " autocmd User NeomakeFinished :echom "Build complete"
augroup END

"call AutocompleteOnInsertChar([
"\'(', ')', '[', ']',
"\';', ',', '.',  ':',
"\'!', '='])
"
" }}}

